//////////////////////////////////////////////
// REXION PROGRAMMING LANGUAGE v1.0 (R4)   //
// INTRINSIC SYSTEM LANGUAGE SPECIFICATION //
//////////////////////////////////////////////

// üî∞ LANGUAGE OVERVIEW
// ------------------------------------------------------
// Name: Rexion
// Extension: .r4
// Paradigm: Declarative, Procedural, Instruction-Oriented
// Execution Model: AOT + JIT Hybrid
// Final Output: Machine Code (.exe, .bin, .hex)
// Intermediate Representation: Serialized Flow-NASM-HEX Table

// üîß GRAMMAR DEFINITIONS (ANTLR-Compatible EBNF)
// ------------------------------------------------------
program     : { statement } EOF;
statement   : define_stmt | assign_stmt | func_decl | func_call | print_stmt | control_stmt ;

define_stmt : 'define' IDENTIFIER ':' type_spec ';';
type_spec   : 'integer' | 'decimal' | 'string' | 'boolean' | 'list' '<' type_spec '>' ;

assign_stmt : IDENTIFIER '=' expression ';';

func_decl   : 'func' IDENTIFIER '(' [param_list] ')' block;
param_list  : IDENTIFIER (',' IDENTIFIER)*;
block       : '{' { statement } '}';

func_call   : IDENTIFIER '(' [arg_list] ')' ';';
arg_list    : expression (',' expression)*;

print_stmt  : 'print' expression ';';

control_stmt: 'if' condition block ('else' block)?
            | 'while' condition block
            | 'return' expression? ';';

condition   : expression comparator expression;
comparator  : '==' | '!=' | '<' | '<=' | '>' | '>=';

expression  : term (('+'|'-') term)*;
term        : factor (('*'|'/') factor)*;
factor      : NUMBER | STRING | IDENTIFIER | func_call | '(' expression ')';

memory_stmt : 'allocate' IDENTIFIER 'in' ('stack'|'heap') ';'
            | 'deallocate' IDENTIFIER ';'
            | 'mutex' IDENTIFIER '{' statement* '}'
            | 'wipe' IDENTIFIER ';';

flow_stmt   : 'pop' | 'jump' | 'mov' | 'bump' ;

logic_stmt  : 'assert' condition ';'
            | 'assume' condition ';'
            | 'diagnose' expression ';'
            | 'raise' error_level STRING ';';

error_level : 'minor' | 'major' | 'fatal';

io_stmt     : 'input' IDENTIFIER ':' type_spec ';'
            | 'output' expression ';';

NUMBER      : DIGIT+ ('.' DIGIT+)?;
STRING      : '"' .*? '"';
IDENTIFIER  : LETTER (LETTER | DIGIT | '_')*;

fragment DIGIT  : [0-9];
fragment LETTER : [A-Za-z];

// üî© COMPILER PIPELINE (rexionc)
// ------------------------------------------------------
// 1. Lexer: Python-based using regex
// 2. Parser: Python-based recursive descent / optionally LALR via PLY
// 3. AST: Python class structure mapped to grammar nodes
// 4. IR: Intermediate Table (Flow-NASM-HEX) generator
// 5. Codegen:
//     - .asm via NASM
//     - .hex dump for inspection
//     - .exe via GCC/LLVM backend linkage
// 6. Optimizer:
//     - AOT Optimizations (dead code, const folding)
//     - JIT: Optional hooks into LLVM‚Äôs MCJIT / Python runtime JIT

// 7. CLI: 'rexionc' Command Line Interface
//     $ rexionc hello.r4 -o hello.exe
//     $ rexionc run script.r4
//     Options: --jit, --debug, --ir-dump, --asm-out

// üìÑ IDE PLUGIN: Visual Studio (.vsix)
// ------------------------------------------------------
// File: syntax/r4.tmLanguage.json
// Highlight:
// - Keywords: define, func, if, else, return, while
// - Types: integer, decimal, string, boolean
// - Builtins: print, allocate, deallocate, mutex, wipe, assert, raise
// - Comments: // line comment
// - Extensions: R4 snippets, autocomplete, hover docs

// ‚öôÔ∏è TOOLING SCRIPTS
// ------------------------------------------------------
// Makefile:
// build: python3 src/rexionc.py $(SRC) -o $(BIN)
// clean: rm -rf *.o *.asm *.exe build/

// setup.bat:
// @echo off
// python -m venv env && env\Scripts\activate && pip install -r requirements.txt

// requirements.txt:
// ply
// llvmlite
// rich
// colorama
// pyinstaller

// üìö REXION LANGUAGE MANUAL (Codex Style)
// ------------------------------------------------------
// Sections:
// - Intro to Rexion Philosophy
// - UEI Concept and Purpose
// - Define-Declare-Instruct-Result Flow
// - Flowchart AST Samples
// - NASM-HEX Flow Explained
// - R4 Syntax Overview
// - Memory Handling & Mutex
// - Error Hierarchy: flag, raise, pass, bypass
// - Smart Recursion & Silent Parallelism
// - Pattern Matching, Lists, Derivatives
// - Compiler Flags, Debug Tips, Code Layout

// üíª LIVE DEMO (.r4 to .exe)
// ------------------------------------------------------
// hello.r4
import "std/io.r4";
define message: string;
message = "Hello, Rexion!";
print message;

// Build:
// $ rexionc hello.r4 -o hello.exe
// $ ./hello.exe
// ‚Üí Hello, Rexion!

// END SPEC
