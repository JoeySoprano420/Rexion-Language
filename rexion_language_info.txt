//////////////////////////////////////////////
// REXION PROGRAMMING LANGUAGE v1.0 (R4)   //
// INTRINSIC SYSTEM LANGUAGE SPECIFICATION //
//////////////////////////////////////////////

// ðŸ”° LANGUAGE OVERVIEW
// ------------------------------------------------------
// Name: Rexion
// Extension: .r4
// Paradigm: Declarative, Procedural, Instruction-Oriented
// Execution Model: AOT + JIT Hybrid
// Final Output: Machine Code (.exe, .bin, .hex)
// Intermediate Representation: Serialized Flow-NASM-HEX Table

// ðŸ”§ GRAMMAR DEFINITIONS (ANTLR-Compatible EBNF)
// ------------------------------------------------------
program     : { statement } EOF;
statement   : define_stmt | assign_stmt | func_decl | func_call | print_stmt | control_stmt ;

define_stmt : 'define' IDENTIFIER ':' type_spec ';';
type_spec   : 'integer' | 'decimal' | 'string' | 'boolean' | 'list' '<' type_spec '>' ;

assign_stmt : IDENTIFIER '=' expression ';';

func_decl   : 'func' IDENTIFIER '(' [param_list] ')' block;
param_list  : IDENTIFIER (',' IDENTIFIER)*;
block       : '{' { statement } '}';

func_call   : IDENTIFIER '(' [arg_list] ')' ';';
arg_list    : expression (',' expression)*;

print_stmt  : 'print' expression ';';

control_stmt: 'if' condition block ('else' block)?
            | 'while' condition block
            | 'return' expression? ';';

condition   : expression comparator expression;
comparator  : '==' | '!=' | '<' | '<=' | '>' | '>=';

expression  : term (('+'|'-') term)*;
term        : factor (('*'|'/') factor)*;
factor      : NUMBER | STRING | IDENTIFIER | func_call | '(' expression ')';

memory_stmt : 'allocate' IDENTIFIER 'in' ('stack'|'heap') ';'
            | 'deallocate' IDENTIFIER ';'
            | 'mutex' IDENTIFIER '{' statement* '}'
            | 'wipe' IDENTIFIER ';';

flow_stmt   : 'pop' | 'jump' | 'mov' | 'bump' ;

logic_stmt  : 'assert' condition ';'
            | 'assume' condition ';'
            | 'diagnose' expression ';'
            | 'raise' error_level STRING ';';

error_level : 'minor' | 'major' | 'fatal';

io_stmt     : 'input' IDENTIFIER ':' type_spec ';'
            | 'output' expression ';';

NUMBER      : DIGIT+ ('.' DIGIT+)?;
STRING      : '"' .*? '"';
IDENTIFIER  : LETTER (LETTER | DIGIT | '_')*;

fragment DIGIT  : [0-9];
fragment LETTER : [A-Za-z];


// ðŸš€ REXION BUILD PLAN EXECUTED
// ------------------------------------------------------

// âœ… Step 1: rexionc Compiler (C/NASM)
// ------------------------------------------------------
// - Lexer/Parser â†’ Handcrafted in C (recursive-descent)
// - IR: Serialized Flow-NASM-Hex Map
// - Codegen: Emits NASM .asm, .hex dumps
// - Final Output: .exe via Clang/GCC
// - JIT: Optional (via LLVM/llvmlite)


// âœ… Step 2: Visual Studio IDE Plugin
// ------------------------------------------------------
// - File: syntax/r4.tmLanguage.json
// - Features: Autocomplete, keyword highlighting, hover documentation
// - Format: VSIX extension plugin with Rexion grammar support


// âœ… Step 3: Executable CLI Toolchain
// ------------------------------------------------------
// - Command: rexionc
// - Options:
//     -o <out.exe>
//     --jit
//     --ir-dump
//     --asm-out
//     --debug
// - Files:
//     Makefile
//     setup.bat
//     requirements.txt
//     language_list.txt
//     project_instructions.md
//     package_details.json


// âœ… Step 4: Codex-style Language Manual
// ------------------------------------------------------
// Format: Markdown â†’ PDF or DOCX
// Contents:
// - UEI logic explanation
// - AST flowchart examples
// - Memory control and mutexes
// - Symbolic definitions and abstraction rules
// - Inference and error resolution systems
// - Silent recursion and pattern inference
// - Full grammar, intrinsic operations, and examples
// - Program structure, writing logic, style conventions


// ðŸ’» LIVE DEMO (.r4 to .exe)
// ------------------------------------------------------
// hello.r4
import "std/io.r4";
define message: string;
message = "Hello, Rexion!";
print message;

// Build:
// $ rexionc hello.r4 -o hello.exe
// $ ./hello.exe
// â†’ Hello, Rexion!

// END SPEC
